"""
SHiFT Code Checker + Streamlit UI

What this app does:
- Accepts a list of SHiFT codes (paste or upload .txt/.csv)
- For each code, tries to detect whether it's listed as "active" on public trackers
  (mentalMars, shiftcodestk, game8) and also probes the official SHiFT site
  to see whether the code appears to be immediately redeemable or requires login.
- Compiles separate tables for "Likely valid / active", "Expired / not found", and "Unknown / requires login"
- Allows export to CSV and copying for quick redeeming.

Limitations:
- Official redemption via SHiFT requires signing in; programmatic verification against a user's account or redemption status is NOT possible without logging in with user credentials and using 2K/Gearbox internal APIs. This tool instead checks public tracker sites and the SHiFT landing page to heuristically determine if a code is currently listed/active. See 2K support for official redeem instructions.

Author: Generated by ChatGPT
"""

import re
import io
import csv
import time
from typing import List, Dict, Tuple

import requests
from bs4 import BeautifulSoup
import streamlit as st
import pandas as pd

# ---------------------- Configuration ----------------------
REQUEST_TIMEOUT = 10
HEADERS = {
    "User-Agent": "Mozilla/5.0 (compatible; ShiftChecker/1.0; +https://github.com/yourrepo)",
}

# Public tracker URLs to search for codes (heuristic)
TRACKERS = [
    # mentalmars maintains lists and is frequently updated
    "https://mentalmars.com/tag/shift-codes/",
    # ShiftCodesTK - community tracker
    "https://shiftcodestk.com/",
    # Game8 (news pages for Borderlands)
    "https://game8.co/games/Borderlands-4/archives/",
    # 2K/Borders official shift news pages (Borderlands 3/4 examples)
    "https://borderlands.2k.com/news/",
]

# Official SHiFT landing (may redirect to login / require JS)
OFFICIAL_SHIFT_URL = "https://shift.gearboxsoftware.com/"

CODE_RE = re.compile(r"[A-Z0-9]{5}(?:-[A-Z0-9]{5}){4}")

# ---------------------- Helper functions ----------------------

def normalize_code(s: str) -> str:
    """Normalize common code input formats: strip whitespace, replace lower-case, ensure dashes."""
    s = s.strip().upper()
    # Remove spaces
    s = s.replace(" ", "")
    # Replace wrong separators
    s = s.replace("_", "-")
    # If user pasted without dashes and has 25 chars, insert dashes every 5
    chars = re.sub(r"[^A-Z0-9]", "", s)
    if len(chars) == 25:
        parts = [chars[i:i+5] for i in range(0, 25, 5)]
        return "-".join(parts)
    # If already contains dashes and matches shape, keep
    if CODE_RE.search(s):
        m = CODE_RE.search(s)
        return m.group(0)
    return s


def fetch_text(url: str) -> Tuple[bool, str]:
    """Fetch a URL returning (ok, text). Handles basic errors."""
    try:
        r = requests.get(url, headers=HEADERS, timeout=REQUEST_TIMEOUT)
        r.raise_for_status()
        return True, r.text
    except Exception as e:
        return False, f"ERROR: {e}"


def search_trackers_for_code(code: str) -> Dict[str, bool]:
    """Search configured tracker pages for the presence of the code string.
    Returns a dict of {tracker_url: found_bool}.
    This is heuristic: presence on a tracker usually means active/released.
    """
    results = {}
    for url in TRACKERS:
        ok, text = fetch_text(url)
        if not ok:
            results[url] = False
            continue
        found = code in text
        results[url] = found
    return results


def probe_official_for_code(code: str) -> str:
    """Try to access the official SHiFT landing or redeem endpoint with the code present
    as a query param and look for obvious messages. This is best-effort and may
    redirect to login which we mark as 'requires_login'.
    Returns one of: 'listed', 'invalid', 'requires_login', 'unknown'
    """
    try:
        # Try the official SHiFT URL with code query param — many share code in querystring for landing
        r = requests.get(OFFICIAL_SHIFT_URL, params={"code": code}, headers=HEADERS, timeout=REQUEST_TIMEOUT, allow_redirects=True)
        text = r.text
        # If redirected to a login page or contains 'sign in', treat as requires_login
        if r.url and ("login" in r.url or "sign-in" in r.url or "signin" in r.url or "sign in" in text.lower()):
            return "requires_login"
        # Heuristic checks for invalid/expired
        lowered = text.lower()
        if "invalid" in lowered or "not a valid" in lowered or "expired" in lowered:
            return "invalid"
        # if the code appears verbatim on the official page, consider it listed
        if code in text:
            return "listed"
        return "unknown"
    except Exception:
        return "unknown"


def check_codes(codes: List[str]) -> pd.DataFrame:
    """Main checking function. Returns a DataFrame with results and supporting info."""
    rows = []
    session = requests.Session()
    session.headers.update(HEADERS)

    for code in codes:
        norm = normalize_code(code)
        trackers = search_trackers_for_code(norm)
        official = probe_official_for_code(norm)
        # Decide status heuristically
        if official == "listed" or any(trackers.values()):
            status = "Likely Active"
        elif official == "requires_login":
            status = "Unknown (requires login)"
        elif official == "invalid":
            status = "Expired / Invalid"
        else:
            # Not found in trackers and official unknown -> expired/unknown
            status = "Expired / Not Found"

        rows.append({
            "input": code,
            "code": norm,
            "status": status,
            "official_probe": official,
            "found_on_trackers": ", ".join([u for u, f in trackers.items() if f]) or "",
        })
        # be polite
        time.sleep(0.4)

    df = pd.DataFrame(rows)
    return df

# ---------------------- Streamlit UI ----------------------

def main():
    st.set_page_config(page_title="SHiFT Code Checker", layout="wide")
    st.title("SHiFT Code Checker — Streamlit")

    st.markdown(
        """
        **How it works:** This app heuristically checks whether SHiFT codes are listed as active on public trackers and probes the SHiFT landing page.

        **Important:** Official redemption requires signing into your SHiFT / 2K account and can only be done via the official site or in-game. This app does NOT sign in for you. See 2K support for official instructions.
        """
    )

    with st.expander("Input codes (one per line or comma-separated)"):
        text = st.text_area("Paste SHiFT codes here", height=150)
        uploaded = st.file_uploader("Or upload a .txt or .csv file with codes", type=["txt", "csv"])

    codes = []
    if text:
        # split by common separators
        parts = re.split(r"[\r\n,;]+", text)
        codes.extend([p.strip() for p in parts if p.strip()])
    if uploaded is not None:
        content = uploaded.read().decode("utf-8")
        parts = re.split(r"[\r\n,;]+", content)
        codes.extend([p.strip() for p in parts if p.strip()])

    if not codes:
        st.info("Paste or upload SHiFT codes to begin.")
        st.stop()

    if st.button("Check codes"):
        with st.spinner("Checking codes — this may take a bit..."):
            df = check_codes(codes)

        col1, col2 = st.columns([2, 1])
        with col1:
            st.subheader("Results")
            st.dataframe(df)

            # Show filtered views
            st.markdown("**Filtered lists**")
            active = df[df["status"] == "Likely Active"]
            expired = df[df["status"].str.contains("Expired")]
            unknown = df[df["status"].str.contains("Unknown")]

            st.markdown(f"**Likely Active ({len(active)})**")
            st.code("\n".join(active["code"].tolist()) or "(none)")

            st.markdown(f"**Expired / Not Found ({len(expired)})**")
            st.code("\n".join(expired["code"].tolist()) or "(none)")

            st.markdown(f"**Unknown / Requires Login ({len(unknown)})**")
            st.code("\n".join(unknown["code"].tolist()) or "(none)")

            # CSV export
            buf = io.StringIO()
            df.to_csv(buf, index=False)
            st.download_button("Download CSV", buf.getvalue(), file_name="shift_codes_results.csv")

        with col2:
            st.subheader("Notes & Sources")
            st.markdown(
                """
                - Official SHiFT redeeming requires signing in — this app does **not** sign into SHiFT for you.
                - This tool uses public trackers (mentalMars, ShiftCodesTK, Game8) and a probe of the official SHiFT landing page to heuristically decide.
                - If you want to *actually redeem* codes, go to the official SHiFT site or the in-game Social menu.
                """
            )
            st.markdown("**Sources used (heuristic):**")
            st.markdown("- 2K Support: Redeeming a SHiFT Code")
            st.markdown("- mentalmars.com and other community trackers")

            st.caption("This is an unofficial tool. Use at your own risk.")

if __name__ == '__main__':
    main()
